import nmap
import subprocess
import platform
import getpass
import os
import signal
import sys
import hashlib
import itertools
import string
import time
import requests

# List all devices on network
class NetworkScanner:
    def __init__(self, target_ip):
        self.target_ip = target_ip

    def scan(self):
        nm = nmap.PortScanner()
        try:
            print(f"Scanning {self.target_ip}... This may take a while. Press Ctrl+C to cancel.")
            nm.scan(hosts=self.target_ip, arguments='-sS -O -Pn -T4')
            print("Scan complete.")
            return nm
        except nmap.PortScannerError as e:
            print(f"Nmap scan error: {e}")
            return None
        except Exception as e:
            print(f"An error occurred: {e}")
            return None

class VulnerabilityAssessor:
    def __init__(self, scan_results):
        self.scan_results = scan_results

    def assess_vulnerabilities(self):
        vulnerabilities = {}
        if not self.scan_results:
            print("No scan results available.")
            return vulnerabilities

        for host in self.scan_results.all_hosts():
            print(f"Assessing host: {host}")
            if self.scan_results[host].state() == 'up':  # Check if host is up
                for proto in self.scan_results[host].all_protocols():
                    lport = self.scan_results[host][proto].keys()
                    for port in lport:
                        port_info = self.scan_results[host][proto][port]
                        if port_info['state'] == 'open':
                            vulnerabilities.setdefault(host, []).append(f"Port {port}: Potential vulnerability")
        return vulnerabilities

def generate_report(vulnerabilities):
    print("Generating report...")
    if not vulnerabilities:
        print("No vulnerabilities found.")
        return
    for host, issues in vulnerabilities.items():
        print(f"Host: {host}")
        for issue in issues:
            print(f" - {issue}")

def check_sys_info():
    os_name = platform.system()
    os_release = platform.release()
    os_version = platform.version()

    print(f"Operating System: {os_name}")
    print(f"Release: {os_release}")
    print(f"Version: {os_version}")

def update_sys(command):
    try:
        # Run the command in the shell, passing the command string
        subprocess.run(['sudo', 'sh', '-c', command], check=True)
    except subprocess.CalledProcessError as e:
        # Print an error message if the command fails
        print(f"Command '{command}' failed with error {e}")

def signal_handler(sig, frame):
    print("\nOperation cancelled. Returning to menu.")
    main_menu()

def hash_password(password):
    return hashlib.sha256(password.encode()).hexdigest()

def brute_force(target_url, username, max_length):
    chars = string.ascii_lowercase + string.digits  # Characters to try
    start_time = time.time()
    
    try:
        for length in range(1, max_length + 1):
            for guess in itertools.product(chars, repeat=length):
                guess = ''.join(guess)
                print(f"Trying password: {guess}")
                response = requests.post(target_url, data={'username': username, 'password': guess})
                if "Login successful!" in response.text:
                    end_time = time.time()
                    print(f"Password found: {guess}")
                    print(f"Time taken: {end_time - start_time:.2f} seconds")
                    return guess
    except KeyboardInterrupt:
        print("\nBrute force operation cancelled.")
        return None

    print("Password not found within given length.")
    return None

def brute_force_menu():
    print("Brute Force Password Cracking")
    target_url = input("Enter the target URL: ")
    username = input("Enter the username to test: ")
    max_length = int(input("Enter the maximum password length to try: "))
    brute_force(target_url, username, max_length)

def main_menu():
    scan_results = None
    vulnerabilities = {}

    while True:
        print("\nPen Testing Tool")
        print("1. Scan Network")
        print("2. Assess Vulnerabilities")
        print("3. Generate Report")
        print("4. Check System Info")
        print("5. Brute Force Password Cracking")
        print("6. Exit")
        choice = input("Enter choice: ")

        if choice == '1':
            print("Enter IP address of the target device or range of IP addresses (e.g., 192.168.1.1-254)")
            target_ip = input("Enter target IP: ")
            scanner = NetworkScanner(target_ip)
            try:
                scan_results = scanner.scan()
            except KeyboardInterrupt:
                print("\nScan cancelled.")
                continue
            if scan_results:
                print("Scan complete.")
            else:
                print("Scan failed.")
        elif choice == '2':
            if scan_results:
                assessor = VulnerabilityAssessor(scan_results)
                try:
                    vulnerabilities = assessor.assess_vulnerabilities()
                except KeyboardInterrupt:
                    print("\nVulnerability assessment cancelled.")
                    continue
                print("Vulnerability assessment complete.")
            else:
                print("No scan results found. Please perform a scan first.")
        elif choice == '3':
            if vulnerabilities:
                generate_report(vulnerabilities)
            else:
                print("No vulnerabilities found. Please assess vulnerabilities first.")
        elif choice == '4':
            check_sys_info()
            print("\nWould you like to update/upgrade your system? (Y/N)")
            user_choice = input().strip().upper()
            if user_choice == 'Y':
                update_sys("apt-get update && apt-get upgrade -y")
            elif user_choice == 'N':
                continue
            else:
                print("Invalid choice.")
        elif choice == '5':
            brute_force_menu()
        elif choice == '6':
            break
        else:
            print("Invalid choice.")

if __name__ == '__main__':
    signal.signal(signal.SIGINT, signal_handler)
    main_menu()

